{"ast":null,"code":"import _asyncToGenerator from \"/home/tynybay/Desktop/Mounika/testing-CRUD/material-CRUD/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UserlistComponent } from './userlist.component';\nimport { UsersService } from '../users.service';\ndescribe('UserlistComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [UserlistComponent],\n      imports: [MatDialogModule, HttpClientModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserlistComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }); //   it('should create', () => {\n  //     expect(component).toBeTruthy();\n  //   });\n\n  it('should check getUser() is working or not', () => {\n    const userServices = fixture.debugElement.injector.get(UsersService);\n    fixture.detectChanges();\n    expect(userServices.getUser()).toBeTruthy();\n  });\n  it('should check deleteUser() is working or not', () => {\n    const userServices = fixture.debugElement.injector.get(UsersService);\n    fixture.detectChanges();\n    expect(userServices.deleteUser(1)).toBeTruthy();\n  });\n  it('should check postUser() is working or not', () => {\n    const userServices = fixture.debugElement.injector.get(UsersService);\n    fixture.detectChanges();\n    const data = {\n      name: 'mounika',\n      email: 'mouni@gmail.com',\n      password: '12345'\n    };\n    expect(userServices.postUser(data)).toBeTruthy();\n  });\n  it('should call open Dialog', () => {\n    let button = fixture.debugElement.nativeElement.querySelector('button');\n    button.click();\n    const dialog = fixture.debugElement.injector.get(UserlistComponent);\n    fixture.detectChanges(); //  expect(dialog.openDialog).toHaveBeenCalled();\n\n    fixture.whenStable().then(() => {\n      expect(dialog.openDialog).toHaveBeenCalled();\n    });\n  });\n  it('should call open deleteDialog', () => {\n    let button = fixture.debugElement.nativeElement.g('button');\n    button.click();\n    const dialog = fixture.debugElement.injector.get(UserlistComponent);\n    fixture.detectChanges(); //  expect(dialog.openDialog).toHaveBeenCalled();\n\n    fixture.whenStable().then(() => {\n      expect(dialog.deleteDialog).toHaveBeenCalled();\n    });\n  });\n});","map":{"version":3,"sources":["/home/tynybay/Desktop/Mounika/testing-CRUD/material-CRUD/src/app/userlist/userlist.component.spec.ts"],"names":["TestBed","MatDialogModule","HttpClientModule","UserlistComponent","UsersService","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","userServices","debugElement","injector","get","expect","getUser","toBeTruthy","deleteUser","data","name","email","password","postUser","button","nativeElement","querySelector","click","dialog","whenStable","then","openDialog","toHaveBeenCalled","g","deleteDialog"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UserlistComponent } from './userlist.component';\nimport { UsersService } from '../users.service';\ndescribe('UserlistComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [UserlistComponent],\n            imports: [MatDialogModule,\n                HttpClientModule]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(UserlistComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    //   it('should create', () => {\n    //     expect(component).toBeTruthy();\n    //   });\n    it('should check getUser() is working or not', () => {\n        const userServices = fixture.debugElement.injector.get(UsersService);\n        fixture.detectChanges();\n        expect(userServices.getUser()).toBeTruthy();\n    });\n    it('should check deleteUser() is working or not', () => {\n        const userServices = fixture.debugElement.injector.get(UsersService);\n        fixture.detectChanges();\n        expect(userServices.deleteUser(1)).toBeTruthy();\n    });\n    it('should check postUser() is working or not', () => {\n        const userServices = fixture.debugElement.injector.get(UsersService);\n        fixture.detectChanges();\n        const data = {\n            name: 'mounika',\n            email: 'mouni@gmail.com',\n            password: '12345'\n        };\n        expect(userServices.postUser(data)).toBeTruthy();\n    });\n    it('should call open Dialog', () => {\n        let button = fixture.debugElement.nativeElement.querySelector('button');\n        button.click();\n        const dialog = fixture.debugElement.injector.get(UserlistComponent);\n        fixture.detectChanges();\n        //  expect(dialog.openDialog).toHaveBeenCalled();\n        fixture.whenStable().then(() => {\n            expect(dialog.openDialog).toHaveBeenCalled();\n        });\n    });\n    it('should call open deleteDialog', () => {\n        let button = fixture.debugElement.nativeElement.g('button');\n        button.click();\n        const dialog = fixture.debugElement.injector.get(UserlistComponent);\n        fixture.detectChanges();\n        //  expect(dialog.openDialog).toHaveBeenCalled();\n        fixture.whenStable().then(() => {\n            expect(dialog.deleteDialog).toHaveBeenCalled();\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"module"}