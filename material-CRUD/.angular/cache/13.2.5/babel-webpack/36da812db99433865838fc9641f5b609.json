{"ast":null,"code":"import _asyncToGenerator from \"/home/tynybay/Desktop/Mounika/testing-CRUD/material-CRUD/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing'; // import { FormBuilder} from '@angular/forms';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\nimport { RouterTestingModule } from '@angular/router/testing'; // import { FormsModule } from '@angular/forms';\n\nimport { Router } from '@angular/router'; // import { BrowserModule } from '@angular/platform-browser';\n// import { NgModule } from '@angular/core';\n\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let router;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      providers: [{\n        provide: Router,\n        useValue: routerSp\n      }],\n      imports: [ReactiveFormsModule, RouterTestingModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }); // beforeEach(()=>{\n  //   component = new LoginComponent(new FormBuilder())\n  // })\n  // it('should create', () => {\n  //   expect(component).toBeTruthy();\n  // });\n\n  it('checking all the fields', () => {\n    const loginFormGroup = component.loginForm;\n    const loginFormValues = {\n      name: '',\n      email: '',\n      password: ''\n    };\n    expect(loginFormGroup.value).toEqual(loginFormValues);\n  });\n  it('check for name requirement', () => {\n    component.loginForm.controls['name'].setValue('');\n    expect(component.loginForm.valid).toBeFalsy();\n  });\n  it('checking for minlength for name', () => {\n    let name = component.loginForm.controls['name'];\n    name.setValue(\"mm\");\n    expect(name.valid).toBeFalsy();\n    ;\n  });\n  it('check email requirement', () => {\n    let email = component.loginForm.controls['email'];\n    email.setValue('');\n    expect(email.valid).toBeFalsy();\n  });\n  it('email-check', () => {\n    let email = component.loginForm.controls['email'];\n    email.setValue('123');\n    expect(email.valid).toBeFalsy();\n  });\n  it('should check for password requirement', () => {\n    let password = component.loginForm.controls['password'];\n    password.setValue('abc');\n    expect(password.valid).toBeFalsy();\n  });\n  it('password checking for minlength validity', () => {\n    let password = component.loginForm.controls['password'];\n    password.setValue('abcef');\n    expect(password.errors).toBeNull();\n    expect(password.valid).toBeTruthy();\n  });\n  it('check form is valid or not by filling all fields', () => {\n    component.loginForm.controls['password'].setValue('admin');\n    component.loginForm.controls['name'].setValue('mounika');\n    component.loginForm.controls['email'].setValue('admin@gmail.com');\n    expect(component.loginForm.valid).toBeTruthy();\n  });\n  it('check form is valid or not by filling one field with incorrect credentials fields', () => {\n    component.loginForm.controls['password'].setValue('ad');\n    component.loginForm.controls['name'].setValue('mounika');\n    component.loginForm.controls['email'].setValue('admin@gmail.com');\n    expect(component.loginForm.valid).toBeFalsy();\n  }); // it('should navigate', () => {\n  //     const component = fixture.componentInstance;\n  //     const navigateSpy = spyOn(router, 'navigate');\n  //     component.login();\n  //     expect(navigateSpy).toHaveBeenCalledWith(['/userlist']);\n  // });\n});","map":{"version":3,"sources":["/home/tynybay/Desktop/Mounika/testing-CRUD/material-CRUD/src/app/login/login.component.spec.ts"],"names":["TestBed","ReactiveFormsModule","LoginComponent","RouterTestingModule","Router","describe","component","fixture","router","beforeEach","configureTestingModule","declarations","providers","provide","useValue","routerSp","imports","compileComponents","createComponent","componentInstance","detectChanges","it","loginFormGroup","loginForm","loginFormValues","name","email","password","expect","value","toEqual","controls","setValue","valid","toBeFalsy","errors","toBeNull","toBeTruthy"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\n// import { FormBuilder} from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\nimport { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { BrowserModule } from '@angular/platform-browser';\n// import { NgModule } from '@angular/core';\ndescribe('LoginComponent', () => {\n    let component;\n    let fixture;\n    let router;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [LoginComponent],\n            providers: [{ provide: Router, useValue: routerSp }],\n            imports: [\n                ReactiveFormsModule,\n                RouterTestingModule\n            ]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(LoginComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    // beforeEach(()=>{\n    //   component = new LoginComponent(new FormBuilder())\n    // })\n    // it('should create', () => {\n    //   expect(component).toBeTruthy();\n    // });\n    it('checking all the fields', () => {\n        const loginFormGroup = component.loginForm;\n        const loginFormValues = {\n            name: '',\n            email: '',\n            password: ''\n        };\n        expect(loginFormGroup.value).toEqual(loginFormValues);\n    });\n    it('check for name requirement', () => {\n        component.loginForm.controls['name'].setValue('');\n        expect(component.loginForm.valid).toBeFalsy();\n    });\n    it('checking for minlength for name', () => {\n        let name = component.loginForm.controls['name'];\n        name.setValue(\"mm\");\n        expect(name.valid).toBeFalsy();\n        ;\n    });\n    it('check email requirement', () => {\n        let email = component.loginForm.controls['email'];\n        email.setValue('');\n        expect(email.valid).toBeFalsy();\n    });\n    it('email-check', () => {\n        let email = component.loginForm.controls['email'];\n        email.setValue('123');\n        expect(email.valid).toBeFalsy();\n    });\n    it('should check for password requirement', () => {\n        let password = component.loginForm.controls['password'];\n        password.setValue('abc');\n        expect(password.valid).toBeFalsy();\n    });\n    it('password checking for minlength validity', () => {\n        let password = component.loginForm.controls['password'];\n        password.setValue('abcef');\n        expect(password.errors).toBeNull();\n        expect(password.valid).toBeTruthy();\n    });\n    it('check form is valid or not by filling all fields', () => {\n        component.loginForm.controls['password'].setValue('admin');\n        component.loginForm.controls['name'].setValue('mounika');\n        component.loginForm.controls['email'].setValue('admin@gmail.com');\n        expect(component.loginForm.valid).toBeTruthy();\n    });\n    it('check form is valid or not by filling one field with incorrect credentials fields', () => {\n        component.loginForm.controls['password'].setValue('ad');\n        component.loginForm.controls['name'].setValue('mounika');\n        component.loginForm.controls['email'].setValue('admin@gmail.com');\n        expect(component.loginForm.valid).toBeFalsy();\n    });\n    // it('should navigate', () => {\n    //     const component = fixture.componentInstance;\n    //     const navigateSpy = spyOn(router, 'navigate');\n    //     component.login();\n    //     expect(navigateSpy).toHaveBeenCalledWith(['/userlist']);\n    // });\n});\n"]},"metadata":{},"sourceType":"module"}